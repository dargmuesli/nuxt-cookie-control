import { resolve } from 'node:path'
import { pathToFileURL } from 'node:url'

import {
  defineNuxtModule,
  addPlugin,
  extendWebpackConfig,
  extendViteConfig,
  addImports,
  createResolver,
  resolvePath,
  addTypeTemplate,
  updateTemplates,
} from '@nuxt/kit'
import type { Nuxt, NuxtApp } from '@nuxt/schema'
// import { defu } from 'defu'
// import webpack from 'webpack' // eslint-disable-line import/no-named-as-default

import { CONFIG_KEY } from './constants'
import { replaceCodePlugin } from './replace'
import { DEFAULTS, type ModuleOptions } from './types'
import { name, version } from '../package.json'

const resolver = createResolver(import.meta.url)
const runtimeDir = resolver.resolve('./runtime')

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name,
    version,
    configKey: CONFIG_KEY,
    compatibility: { nuxt: '^3.0.0' },
  },
  defaults: DEFAULTS,
  hooks: {
    'components:dirs'(dirs) {
      dirs.push({
        path: resolver.resolve(runtimeDir, 'components'),
        prefix: 'cookie',
      })
    },
  },
  async setup(moduleOptions, nuxt) {
    nuxt.options.alias['#cookie-control/set-vars'] =
      moduleOptions.isCssPonyfillEnabled
        ? resolver.resolve(runtimeDir, 'set-vars/ponyfill')
        : resolver.resolve(runtimeDir, 'set-vars/native')

    nuxt.options.alias['#cookie-control'] = runtimeDir
    nuxt.options.build.transpile.push('#cookie-control')

    pushCss(moduleOptions, nuxt)
    blockIframes(moduleOptions)
    await loadLocales(moduleOptions)

    addPlugin(resolver.resolve(runtimeDir, 'plugin'))
    addImports({
      name: 'useCookieControl',
      as: 'useCookieControl',
      from: resolver.resolve(runtimeDir, 'composables'),
    })
    addTypeTemplate({
      filename: 'types/cookie-control.d.ts',
      getContents: getTypeTemplate,
      options: moduleOptions,
    })

    nuxt.hook('builder:watch', async (_event, path) => {
      if (path.includes(`${CONFIG_KEY}.cookies`)) {
        updateTemplates({
          filter: (t) => t.filename === 'types/cookie-control.d.ts',
        })
      }
    })
    // nuxt.hook('modules:done', async () => {
    //   nuxt.options.runtimeConfig.cookieControl = defu(
    //     nuxt.options.runtimeConfig.cookieControl,
    //     moduleOptions,
    //   )
    // })
  },
})

const blockIframes = (moduleOptions: ModuleOptions) => {
  if (moduleOptions.isIframeBlocked) {
    const isIframeBlocked = {
      id: 'ncc_f',
      name: 'functional',
    }

    if (moduleOptions.cookies) {
      if (moduleOptions.cookies.optional) {
        moduleOptions.cookies.optional.push(isIframeBlocked)
      } else {
        moduleOptions.cookies.optional = [isIframeBlocked]
      }
    }

    extendWebpackConfig((config) => {
      config.module?.rules?.push({
        test: /\.vue$/,
        loader: 'string-replace-loader',
        exclude: /node_modules/,
        options: {
          multiple: [
            { search: '<iframe', replace: '<CookieIframe', flags: 'g' },
            { search: '</iframe>', replace: '</CookieIframe>', flags: 'g' },
          ],
        },
      })
    })

    extendViteConfig((config) => {
      config?.plugins?.push(
        replaceCodePlugin({
          replacements: [
            {
              from: /<iframe[^>]*.*|<\/iframe>/g,
              to: (match: string) =>
                match.includes('cookie-enabled')
                  ? match
                  : match
                      .replace(/<iframe/g, '<CookieIframe')
                      .replace(/iframe>/g, 'CookieIframe>'),
            },
          ],
        }),
      )
    })
  }
}

const getTypeTemplate = (data: {
  nuxt: Nuxt
  app: NuxtApp
  options: ModuleOptions
}) => `// Generated by ${name}

import type { ModuleOptions } from '#cookie-control/types'

export default ${JSON.stringify(data.options, undefined, 2)} as ModuleOptions

/**
* Union of the cookie ids specified in the Nuxt configuration.
*/
export type CookieID = ${
  Object.values([
    ...data.options.cookies.necessary,
    ...data.options.cookies.optional,
  ])
    .map((cookie) => `"${cookie.id}"`)
    .join(' | ') || 'never'
};

export type CookieIDs = Array<CookieID>;
`

const loadLocales = async (moduleOptions: ModuleOptions) => {
  const locales = moduleOptions.locales

  moduleOptions.locales = []

  for (const locale of locales) {
    const text = await import(
      pathToFileURL(await resolvePath(resolve(runtimeDir, 'locale', locale)))
        .href
    ).then((r) => r.default || r)

    if (!text) throw new Error(`Could not import text for locale ${locale}`)

    moduleOptions.locales.push(locale)
    moduleOptions.localeTexts[locale] = {
      ...text,
      ...moduleOptions.localeTexts[locale],
    }
  }

  // const regex = new RegExp(moduleOptions.locales.join(COOKIE_ID_SEPARATOR))
  // addWebpackPlugin(
  //   new webpack.ContextReplacementPlugin(
  //     /nuxt-cookie-control[/\\]dist[/\\]runtime[/\\]locale$/,
  //     regex
  //   )
  // )
  // addVitePlugin(vitePlugin, options?)
}

const pushCss = (moduleOptions: ModuleOptions, nuxt: Nuxt) => {
  if (moduleOptions.isCssEnabled)
    nuxt.options.css.push(resolver.resolve(runtimeDir, 'styles.css'))
}

// export interface ModuleRuntimeConfig {
//   [CONFIG_KEY]: ModuleOptions
// }
// declare module 'nuxt/schema' {
//   interface RuntimeConfig extends ModuleRuntimeConfig {}
// }
// declare module '@nuxt/schema' {
//   interface RuntimeConfig extends ModuleRuntimeConfig {}
// }
